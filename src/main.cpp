#include "config.h"
#include "display.h"
#include "encoder_logic.h"
#include "tasks_manager.h"
#include "rpm.h"
#include "server_setup.h"
#include "time_manager.h"
#include <esp_wifi.h>
#include <WiFi.h>
#include <time.h>
#include <ESPAsyncWebServer.h>
#include <ESPAsyncWiFiManager.h>
#include <SPIFFS.h>
#include <atomic>

extern std::atomic<int> activeConnections;

Preferences preferences;

DeviceMode currentMode = UNDEFINED_MODE; // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)

bool localMode = true; // –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ —Å–µ—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º

// Objects
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
// Create server&DNS for work WiFiManager
AsyncWebServer server(80);
DNSServer dns;
// Encoder
Encoder enc1(CLK, DT, SW);
// Servo pulse
Servo esc;
// WiFiManager
AsyncWiFiManager wifiManager(&server, &dns);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AP
const char *apSSID = "Fan_control";
const char *apPassword = "12344321";
unsigned long wifiTimeout;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
int pulseWidth = 1450;        // –®–∏—Ä–∏–Ω–∞ –∏–º–ø—É–ª—å—Å–∞ (–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
volatile int rpm = 0;         // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª—è
int stepSize = 10;            // –®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è
bool isStepAdjusting = false; // –§–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
const int hallSensorPin = 35; // –ü–∏–Ω—ã –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –•–æ–ª–ª–∞

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
String sensorData = "42";
String rotationMode = "Left"; // –õ–µ–≤–æ –∏–ª–∏ –ü—Ä–∞–≤–æ

void setup()
{
    Serial.begin(115200);
    esc.attach(27);                    // –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–æ–¥ ESC –∫ –ø–∏–Ω—É 27
    esc.writeMicroseconds(1450);       // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã –∏–º–ø—É–ª—å—Å–∞ ESC
    delay(2000);                       // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ESC
    esc.writeMicroseconds(pulseWidth); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –∏–º–ø—É–ª—å—Å–∞

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–Ω–∞ –¥–∞—Ç—á–∏–∫–∞ –•–æ–ª–ª–∞ –∫–∞–∫ –≤—Ö–æ–¥–∞
    pinMode(hallSensorPin, INPUT);

    //  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–ª–µ—è
    if (!display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDRESS))
    {
        Serial.println("SSD1306 allocation failed");
        while (true)
            ; // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }
    display.clearDisplay();
    display.drawBitmap(0, 0, myLogo, 128, 64, SSD1306_WHITE); // –†–∏—Å—É–µ–º –ª–æ–≥–æ—Ç–∏–ø
    display.display();
    delay(2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ
    //  –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    preferences.begin("fan_control", false);
    currentMode = static_cast<DeviceMode>(preferences.getInt("device_mode", NETWORK_MODE));
    preferences.end();
    Serial.print("currentMode ");
    Serial.println(currentMode);

    Serial.print("Saved Mode: ");
    Serial.println(currentMode == LOCAL_MODE ? "LOCAL_MODE" : "NETWORK_MODE");

    // –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    int selectedMode = 0; // 0 - LOCAL_MODE, 1 - NETWORK_MODE
    unsigned long startTime = millis();

    while (millis() - startTime < 10000) // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    {
        enc1.tick();

        if (enc1.isRight())
        {
            selectedMode = 1; // NETWORK_MODE
        }

        if (enc1.isLeft())
        {
            selectedMode = 0; // LOCAL_MODE
        }

        // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 0);
        display.println("Select Mode:");
        display.println(selectedMode == 0 ? "> LOCAL" : "  LOCAL");
        display.println(selectedMode == 1 ? "> NETWORK" : "  NETWORK");
        display.display();

        if (enc1.isClick())
        {
            currentMode = (selectedMode == 0) ? LOCAL_MODE : NETWORK_MODE;
            break;
        }

        delay(10);
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∂–∏–º –∏–∑ –ø–∞–º—è—Ç–∏
    if (millis() - startTime >= 10000)
    {
        Serial.println("No selection, loading saved mode.");
    }
    else
    {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        preferences.begin("fan_control", false);
        preferences.putInt("device_mode", currentMode);
        preferences.end();
    }

    Serial.print("Selected Mode: ");
    Serial.println(currentMode == LOCAL_MODE ? "LOCAL_MODE" : "NETWORK_MODE");

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º
    if (currentMode == NETWORK_MODE)
    {
        Serial.println("Attempting WiFi connection...");
        wifiManager.setConnectTimeout(10);
        Serial.println("WiFi connection failed, switching to AP Mode.");
        WiFi.mode(WIFI_AP);
        WiFi.softAP(apSSID, apPassword);
        delay(100);
        if (esp_wifi_connect() != ESP_OK && currentMode == NETWORK_MODE)
        {
            // üîπ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ AP Mode –Ω–∞ –¥–∏—Å–ø–ª–µ–µ –î–û –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á
            display.clearDisplay();
            display.setTextSize(1);
            display.setTextColor(SSD1306_WHITE);
            display.setCursor(0, 0);
            display.println("AP Mode Active");
            display.println("AP Name: " + String(apSSID));
            display.print("IP: ");
            display.println(WiFi.softAPIP());
            display.print("Pass: ");
            display.println(apPassword);
            display.display();
        }

        if (wifiManager.autoConnect(apSSID, apPassword))
        {
            Serial.println("WiFi connected!");
            Serial.print("IP Address: ");
            Serial.println(WiFi.localIP());

            if (!SPIFFS.begin(true))
            {
                Serial.println("Failed to mount SPIFFS");
                return;
            }

            Serial.println("SPIFFS mounted successfully");

            setupServer(server);
            server.begin();
            Serial.println("Server started!");
        }
        else
        {
            Serial.println("WiFi connection failed, switching to local mode.");
            currentMode = LOCAL_MODE;
        }
    }
    createTasks();
    initRPM();
}

void loop()
{
    if (currentMode == NETWORK_MODE)
    {
        static unsigned long lastMillis = 0;
        if (millis() - lastMillis > 5000)
        {
            lastMillis = millis();
            Serial.printf("Free heap: %d bytes\n", esp_get_free_heap_size());
            Serial.printf("Heap: %d bytes, Active connections: %d\n", esp_get_free_heap_size(), activeConnections.load());
            Serial.println("Preparing response for /api/data...");
        }
    }
    // vTaskDelay(portMAX_DELAY);
    vTaskDelay(pdMS_TO_TICKS(1000));
}